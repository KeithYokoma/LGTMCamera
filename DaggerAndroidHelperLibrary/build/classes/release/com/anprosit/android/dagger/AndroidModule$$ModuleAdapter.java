// Code generated by dagger-compiler.  Do not edit.
package com.anprosit.android.dagger;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class AndroidModule$$ModuleAdapter extends ModuleAdapter<AndroidModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public AndroidModule$$ModuleAdapter() {
    super(com.anprosit.android.dagger.AndroidModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, AndroidModule module) {
    bindings.contributeProvidesBinding("dagger.ObjectGraph", new ProvideApplicationGraphProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.anprosit.android.dagger.annotation.ForApplication()/android.content.Context", new ProvideApplicationContextProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.app.Application", new ProvideApplicationProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.os.Handler", new ProvideHandlerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.telephony.SmsManager", new ProvideSmsManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.telephony.TelephonyManager", new ProvideTelephonyManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.view.WindowManager", new ProvideWindowManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.os.Vibrator", new ProvideVibratorProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.speech.SpeechRecognizer", new ProvideSpeechRecognizerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.hardware.SensorManager", new ProvideSensorManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.bluetooth.BluetoothAdapter", new ProvideBluetoothAdapterProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.location.LocationManager", new ProvideLocationManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.anprosit.android.dagger.factory.MediaRecorderFactory", new ProvideMediaRecorderFactoryProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.anprosit.android.dagger.factory.MediaPlayerFactory", new ProvideMediaPlayerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.media.AudioManager", new ProvideAudioManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.view.LayoutInflater", new ProvideLayoutInflaterProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.os.PowerManager", new ProvodePowerManagerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.nfc.NfcAdapter", new ProvideNfcAdapterProvidesAdapter(module));
  }

  /**
   * A {@code Binding<dagger.ObjectGraph>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<dagger.ObjectGraph>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideApplicationGraphProvidesAdapter extends ProvidesBinding<dagger.ObjectGraph>
      implements Provider<dagger.ObjectGraph> {
    private final AndroidModule module;

    public ProvideApplicationGraphProvidesAdapter(AndroidModule module) {
      super("dagger.ObjectGraph", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideApplicationGraph");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<dagger.ObjectGraph>}.
     */
    @Override
    public dagger.ObjectGraph get() {
      return module.provideApplicationGraph();
    }
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideApplicationContextProvidesAdapter extends ProvidesBinding<android.content.Context>
      implements Provider<android.content.Context> {
    private final AndroidModule module;

    public ProvideApplicationContextProvidesAdapter(AndroidModule module) {
      super("@com.anprosit.android.dagger.annotation.ForApplication()/android.content.Context", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideApplicationContext");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.provideApplicationContext();
    }
  }

  /**
   * A {@code Binding<android.app.Application>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.app.Application>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideApplicationProvidesAdapter extends ProvidesBinding<android.app.Application>
      implements Provider<android.app.Application> {
    private final AndroidModule module;

    public ProvideApplicationProvidesAdapter(AndroidModule module) {
      super("android.app.Application", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideApplication");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.Application>}.
     */
    @Override
    public android.app.Application get() {
      return module.provideApplication();
    }
  }

  /**
   * A {@code Binding<android.os.Handler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.os.Handler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideHandlerProvidesAdapter extends ProvidesBinding<android.os.Handler>
      implements Provider<android.os.Handler> {
    private final AndroidModule module;

    public ProvideHandlerProvidesAdapter(AndroidModule module) {
      super("android.os.Handler", NOT_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideHandler");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.os.Handler>}.
     */
    @Override
    public android.os.Handler get() {
      return module.provideHandler();
    }
  }

  /**
   * A {@code Binding<android.telephony.SmsManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.telephony.SmsManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSmsManagerProvidesAdapter extends ProvidesBinding<android.telephony.SmsManager>
      implements Provider<android.telephony.SmsManager> {
    private final AndroidModule module;

    public ProvideSmsManagerProvidesAdapter(AndroidModule module) {
      super("android.telephony.SmsManager", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideSmsManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.telephony.SmsManager>}.
     */
    @Override
    public android.telephony.SmsManager get() {
      return module.provideSmsManager();
    }
  }

  /**
   * A {@code Binding<android.telephony.TelephonyManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.telephony.TelephonyManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideTelephonyManagerProvidesAdapter extends ProvidesBinding<android.telephony.TelephonyManager>
      implements Provider<android.telephony.TelephonyManager> {
    private final AndroidModule module;

    public ProvideTelephonyManagerProvidesAdapter(AndroidModule module) {
      super("android.telephony.TelephonyManager", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideTelephonyManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.telephony.TelephonyManager>}.
     */
    @Override
    public android.telephony.TelephonyManager get() {
      return module.provideTelephonyManager();
    }
  }

  /**
   * A {@code Binding<android.view.WindowManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.view.WindowManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideWindowManagerProvidesAdapter extends ProvidesBinding<android.view.WindowManager>
      implements Provider<android.view.WindowManager> {
    private final AndroidModule module;

    public ProvideWindowManagerProvidesAdapter(AndroidModule module) {
      super("android.view.WindowManager", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideWindowManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.view.WindowManager>}.
     */
    @Override
    public android.view.WindowManager get() {
      return module.provideWindowManager();
    }
  }

  /**
   * A {@code Binding<android.os.Vibrator>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.os.Vibrator>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideVibratorProvidesAdapter extends ProvidesBinding<android.os.Vibrator>
      implements Provider<android.os.Vibrator> {
    private final AndroidModule module;

    public ProvideVibratorProvidesAdapter(AndroidModule module) {
      super("android.os.Vibrator", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideVibrator");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.os.Vibrator>}.
     */
    @Override
    public android.os.Vibrator get() {
      return module.provideVibrator();
    }
  }

  /**
   * A {@code Binding<android.speech.SpeechRecognizer>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.speech.SpeechRecognizer>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSpeechRecognizerProvidesAdapter extends ProvidesBinding<android.speech.SpeechRecognizer>
      implements Provider<android.speech.SpeechRecognizer> {
    private final AndroidModule module;

    public ProvideSpeechRecognizerProvidesAdapter(AndroidModule module) {
      super("android.speech.SpeechRecognizer", NOT_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideSpeechRecognizer");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.speech.SpeechRecognizer>}.
     */
    @Override
    public android.speech.SpeechRecognizer get() {
      return module.provideSpeechRecognizer();
    }
  }

  /**
   * A {@code Binding<android.hardware.SensorManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.hardware.SensorManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSensorManagerProvidesAdapter extends ProvidesBinding<android.hardware.SensorManager>
      implements Provider<android.hardware.SensorManager> {
    private final AndroidModule module;

    public ProvideSensorManagerProvidesAdapter(AndroidModule module) {
      super("android.hardware.SensorManager", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideSensorManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.hardware.SensorManager>}.
     */
    @Override
    public android.hardware.SensorManager get() {
      return module.provideSensorManager();
    }
  }

  /**
   * A {@code Binding<android.bluetooth.BluetoothAdapter>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.bluetooth.BluetoothAdapter>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideBluetoothAdapterProvidesAdapter extends ProvidesBinding<android.bluetooth.BluetoothAdapter>
      implements Provider<android.bluetooth.BluetoothAdapter> {
    private final AndroidModule module;

    public ProvideBluetoothAdapterProvidesAdapter(AndroidModule module) {
      super("android.bluetooth.BluetoothAdapter", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideBluetoothAdapter");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.bluetooth.BluetoothAdapter>}.
     */
    @Override
    public android.bluetooth.BluetoothAdapter get() {
      return module.provideBluetoothAdapter();
    }
  }

  /**
   * A {@code Binding<android.location.LocationManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.location.LocationManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideLocationManagerProvidesAdapter extends ProvidesBinding<android.location.LocationManager>
      implements Provider<android.location.LocationManager> {
    private final AndroidModule module;

    public ProvideLocationManagerProvidesAdapter(AndroidModule module) {
      super("android.location.LocationManager", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideLocationManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.location.LocationManager>}.
     */
    @Override
    public android.location.LocationManager get() {
      return module.provideLocationManager();
    }
  }

  /**
   * A {@code Binding<com.anprosit.android.dagger.factory.MediaRecorderFactory>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.anprosit.android.dagger.factory.MediaRecorderFactory>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideMediaRecorderFactoryProvidesAdapter extends ProvidesBinding<com.anprosit.android.dagger.factory.MediaRecorderFactory>
      implements Provider<com.anprosit.android.dagger.factory.MediaRecorderFactory> {
    private final AndroidModule module;

    public ProvideMediaRecorderFactoryProvidesAdapter(AndroidModule module) {
      super("com.anprosit.android.dagger.factory.MediaRecorderFactory", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideMediaRecorderFactory");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.anprosit.android.dagger.factory.MediaRecorderFactory>}.
     */
    @Override
    public com.anprosit.android.dagger.factory.MediaRecorderFactory get() {
      return module.provideMediaRecorderFactory();
    }
  }

  /**
   * A {@code Binding<com.anprosit.android.dagger.factory.MediaPlayerFactory>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.anprosit.android.dagger.factory.MediaPlayerFactory>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideMediaPlayerProvidesAdapter extends ProvidesBinding<com.anprosit.android.dagger.factory.MediaPlayerFactory>
      implements Provider<com.anprosit.android.dagger.factory.MediaPlayerFactory> {
    private final AndroidModule module;

    public ProvideMediaPlayerProvidesAdapter(AndroidModule module) {
      super("com.anprosit.android.dagger.factory.MediaPlayerFactory", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideMediaPlayer");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.anprosit.android.dagger.factory.MediaPlayerFactory>}.
     */
    @Override
    public com.anprosit.android.dagger.factory.MediaPlayerFactory get() {
      return module.provideMediaPlayer();
    }
  }

  /**
   * A {@code Binding<android.media.AudioManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.media.AudioManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAudioManagerProvidesAdapter extends ProvidesBinding<android.media.AudioManager>
      implements Provider<android.media.AudioManager> {
    private final AndroidModule module;

    public ProvideAudioManagerProvidesAdapter(AndroidModule module) {
      super("android.media.AudioManager", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideAudioManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.media.AudioManager>}.
     */
    @Override
    public android.media.AudioManager get() {
      return module.provideAudioManager();
    }
  }

  /**
   * A {@code Binding<android.view.LayoutInflater>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.view.LayoutInflater>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideLayoutInflaterProvidesAdapter extends ProvidesBinding<android.view.LayoutInflater>
      implements Provider<android.view.LayoutInflater> {
    private final AndroidModule module;

    public ProvideLayoutInflaterProvidesAdapter(AndroidModule module) {
      super("android.view.LayoutInflater", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideLayoutInflater");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.view.LayoutInflater>}.
     */
    @Override
    public android.view.LayoutInflater get() {
      return module.provideLayoutInflater();
    }
  }

  /**
   * A {@code Binding<android.os.PowerManager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.os.PowerManager>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvodePowerManagerProvidesAdapter extends ProvidesBinding<android.os.PowerManager>
      implements Provider<android.os.PowerManager> {
    private final AndroidModule module;

    public ProvodePowerManagerProvidesAdapter(AndroidModule module) {
      super("android.os.PowerManager", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provodePowerManager");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.os.PowerManager>}.
     */
    @Override
    public android.os.PowerManager get() {
      return module.provodePowerManager();
    }
  }

  /**
   * A {@code Binding<android.nfc.NfcAdapter>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.nfc.NfcAdapter>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideNfcAdapterProvidesAdapter extends ProvidesBinding<android.nfc.NfcAdapter>
      implements Provider<android.nfc.NfcAdapter> {
    private final AndroidModule module;

    public ProvideNfcAdapterProvidesAdapter(AndroidModule module) {
      super("android.nfc.NfcAdapter", IS_SINGLETON, "com.anprosit.android.dagger.AndroidModule", "provideNfcAdapter");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.nfc.NfcAdapter>}.
     */
    @Override
    public android.nfc.NfcAdapter get() {
      return module.provideNfcAdapter();
    }
  }
}
