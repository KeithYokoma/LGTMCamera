// Code generated by dagger-compiler.  Do not edit.
package com.anprosit.android.dagger;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ServiceModule$$ModuleAdapter extends ModuleAdapter<ServiceModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public ServiceModule$$ModuleAdapter() {
    super(com.anprosit.android.dagger.ServiceModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, ServiceModule module) {
    bindings.contributeProvidesBinding("dagger.ObjectGraph", new ProvideServiceGraphProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.anprosit.android.dagger.annotation.ForService()/android.content.Context", new ProvideServiceContextProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.app.Service", new ProvideServiceProvidesAdapter(module));
  }

  /**
   * A {@code Binding<dagger.ObjectGraph>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<dagger.ObjectGraph>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideServiceGraphProvidesAdapter extends ProvidesBinding<dagger.ObjectGraph>
      implements Provider<dagger.ObjectGraph> {
    private final ServiceModule module;

    public ProvideServiceGraphProvidesAdapter(ServiceModule module) {
      super("dagger.ObjectGraph", IS_SINGLETON, "com.anprosit.android.dagger.ServiceModule", "provideServiceGraph");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<dagger.ObjectGraph>}.
     */
    @Override
    public dagger.ObjectGraph get() {
      return module.provideServiceGraph();
    }
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideServiceContextProvidesAdapter extends ProvidesBinding<android.content.Context>
      implements Provider<android.content.Context> {
    private final ServiceModule module;

    public ProvideServiceContextProvidesAdapter(ServiceModule module) {
      super("@com.anprosit.android.dagger.annotation.ForService()/android.content.Context", IS_SINGLETON, "com.anprosit.android.dagger.ServiceModule", "provideServiceContext");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.provideServiceContext();
    }
  }

  /**
   * A {@code Binding<android.app.Service>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.app.Service>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideServiceProvidesAdapter extends ProvidesBinding<android.app.Service>
      implements Provider<android.app.Service> {
    private final ServiceModule module;

    public ProvideServiceProvidesAdapter(ServiceModule module) {
      super("android.app.Service", IS_SINGLETON, "com.anprosit.android.dagger.ServiceModule", "provideService");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.app.Service>}.
     */
    @Override
    public android.app.Service get() {
      return module.provideService();
    }
  }
}
